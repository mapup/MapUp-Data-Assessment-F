# -*- coding: utf-8 -*-
"""python_Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LK-e9R5uQd66_NKqpEjaTHzaJtILnYhv
"""

import numpy as np # linear algebra
import pandas as pd # data processing
import warnings# warning filter

"""**Question 1: Distance Matrix Calculation**"""

import pandas as pd
import networkx as nx

def calculate_distance_matrix(dataframe):

    graph = nx.DiGraph()


    for _, row in dataframe.iterrows():
        source = row['id_start']
        target = row['id_end']
        distance = row['distance']


        graph.add_edge(source, target, weight=distance)
        graph.add_edge(target, source, weight=distance)


    shortest_paths = dict(nx.all_pairs_dijkstra_path_length(graph))

    # Create a DataFrame to store the distance matrix
    locations = sorted(graph.nodes())
    distance_matrix = pd.DataFrame(index=locations, columns=locations)


    for source in locations:
        for target in locations:
            if source == target:
                distance_matrix.loc[source, target] = 0
            else:

                distance_matrix.loc[source, target] = shortest_paths[source][target]

    return distance_matrix

result.head()

dataset = pd.read_csv('/content/dataset-3.csv')
result = calculate_distance_matrix(dataset)
print(result)

result.head()

dataset.head()

"""**Question 2: Unroll Distance Matrix**"""

def unroll_distance_matrix(distance_matrix):
    ids = distance_matrix.index
    unrolled_data = []

    for i, id_start in enumerate(ids):
        for id_end in ids[i+1:]:
            distance = distance_matrix.at[id_start, id_end]
            unrolled_data.append({'id_start': id_start, 'id_end': id_end, 'distance': distance})

    return pd.DataFrame(unrolled_data)

unrolled_result = unroll_distance_matrix(result)
print(unrolled_result)

"""**Question 3: Finding IDs within Percentage Threshold**"""

import pandas as pd

def find_ids_within_ten_percentage_threshold(dataframe, reference_value):

    reference_rows = dataframe[dataframe['id_start'] == reference_value]


    reference_avg_distance = reference_rows['distance'].mean()


    lower_bound = reference_avg_distance - 0.1 * reference_avg_distance
    upper_bound = reference_avg_distance + 0.1 * reference_avg_distance

    within_threshold_rows = dataframe[
        (dataframe['distance'] >= lower_bound) & (dataframe['distance'] <= upper_bound)
    ]

    # Get the unique values from the 'id_start' column and sort them
    within_threshold_ids = sorted(within_threshold_rows['id_start'].unique())

    return within_threshold_ids

reference_value = 1001404


result_within_threshold = find_ids_within_ten_percentage_threshold(unrolled_result, reference_value)
print(result_within_threshold)

"""**Question 4: Calculate Toll Rate**"""

import pandas as pd

def calculate_toll_rate(dataframe):
    # Copy the input DataFrame to avoid modifying the original
    result_with_rates = dataframe.copy()

    # Define rate coefficients for each vehicle type
    rate_coefficients = {'moto': 0.8, 'car': 1.2, 'rv': 1.5, 'bus': 2.2, 'truck': 3.6}

    # Calculate toll rates for each vehicle type
    for vehicle_type, rate_coefficient in rate_coefficients.items():
        result_with_rates[vehicle_type] = result_with_rates['distance'] * rate_coefficient

    return result_with_rates

# Call the function
result_with_rates = calculate_toll_rate(unrolled_result)
print(result_with_rates)

"""**Question 5: Calculate Time-Based Toll Rates**"""

import pandas as pd

def calculate_time_based_toll_rates(df):

    def get_discount_factor(hour, day):
        if day in ['Saturday', 'Sunday']:
            return 0.7
        elif 0 <= hour < 10 or 18 <= hour <= 23:
            return 0.8
        elif 10 <= hour < 18:
            return 1.2
        else:
            return 1.0

    # Extracting start_day, end_day, start_time, and end_time from id_start and id_end
    df['start_day'] = pd.to_datetime(df['id_start'], format='%d%H%M%S').dt.day_name()
    df['end_day'] = pd.to_datetime(df['id_end'], format='%d%H%M%S').dt.day_name()
    df['start_time'] = pd.to_datetime(df['id_start'], format='%d%H%M%S').dt.time
    df['end_time'] = pd.to_datetime(df['id_end'], format='%d%H%M%S').dt.time

    # Calculate the discount factor for each row based on start_time and start_day
    df['discount_factor'] = df.apply(lambda row: get_discount_factor(row['start_time'].hour, row['start_day']), axis=1)

    # Apply the discount factor to the toll rates for each vehicle
    vehicles = ['moto', 'car', 'rv', 'bus', 'truck']
    for vehicle in vehicles:
        df[vehicle] *= df['discount_factor']

    # Drop unnecessary columns
    df = df.drop(columns=['discount_factor'])

    return df

# Assuming you have the DataFrame 'result_with_rates'
result_with_time_rates = calculate_time_based_toll_rates(result_with_rates)
print(result_with_time_rates)