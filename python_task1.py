# -*- coding: utf-8 -*-
"""python task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MNzFV6KvbX7MRq4sIDD2xZo4BQU6A4SS
"""

import numpy as np # linear algebra
import pandas as pd # data processing
import warnings# warning filter

generate_car_matrix = pd.read_csv('/content/dataset-1.csv')

generate_car_matrix.head()

"""**Question** 1
**Car Matrix Generation**
"""

import pandas as pd

def generate_car_matrix(dataset_path):
    # Load the dataset into a DataFrame
    df = pd.read_csv(dataset_path)

    # Create a pivot table with id_1 as index, id_2 as columns, and car as values
    car_matrix = pd.pivot_table(df, values='car', index='id_1', columns='id_2', aggfunc='first', fill_value=0)

    # Set the diagonal values to 0
    for index in car_matrix.index:
        if index in car_matrix.columns:
            car_matrix.loc[index, index] = 0

    return car_matrix

dataset_path = '/content/dataset-1.csv'
result_matrix = generate_car_matrix(dataset_path)

# Display the resulting matrix
print(result_matrix)

"""#Question 2
**Car Type Count Calculation**
"""

def get_type_count(df):

    df['car_type'] = pd.cut(df['car'],
                                   bins=[float('-inf'), 15, 25, float('inf')],
                                   labels=['low', 'medium', 'high'],
                                   right=False)
    type_counts = df['car_type'].value_counts().to_dict()
    sorted_type_counts = dict(sorted(type_counts.items()))

    return sorted_type_counts

dataset = pd.read_csv('/content/dataset-1.csv')
result = get_type_count(dataset)
print(result)

"""**Question 3: Bus Count Index Retrieval**"""

def get_bus_indexes(df):
  bus_mean = df['bus'].mean()
  bus_indexes = df[df['bus'] > 2 * bus_mean].index.tolist()
  bus_indexes.sort()
  return bus_indexes

dataset = pd.read_csv('/content/dataset-1.csv')

result = get_bus_indexes(dataset)
print(result)

"""**Question 4: Route Filtering**"""

def filter_routes(df):
    # Group by 'route' and calculate the average of the 'truck' column
    route_avg_truck = df.groupby('route')['truck'].mean()
    filtered_routes = route_avg_truck[route_avg_truck > 7].index.tolist()
    filtered_routes.sort()
    return filtered_routes

dataset = pd.read_csv('/content/dataset-1.csv')
result = filter_routes(dataset)
print(result)

"""**Question 5: Matrix Value Modification**"""

def multiply_matrix(df):
  modified_df = df.applymap(lambda x: x * 0.75 if x > 20 else x * 1.25)
  modified_df = modified_df.round(1)
  return modified_df

modified_result = multiply_matrix(result_matrix)
print(modified_result)

"""**Question 6: Time Check**"""

def timestamp_check(df):

    # Combine 'startDay' and 'startTime' columns into a single datetime column 'start_datetime'
    df['start_datetime'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'],errors='coerce')

    # Combine 'endDay' and 'endTime' columns into a single datetime column 'end_datetime'
    df['end_datetime'] = pd.to_datetime(df['endDay'] + ' ' + df['endTime'],errors='coerce')

    # Calculate the duration of each timestamp
    df['duration'] = df['end_datetime'] - df['start_datetime']

    # Check if the duration covers a full 24-hour period and spans all 7 days of the week
    full24hour = df['duration'].dt.total_seconds() >= 86400  # 24 hours in seconds
    all7days = df['start_datetime'].dt.dayofweek.nunique() == 7

    # Aggregate results based on ('id', 'id_2') pairs
    df = df.groupby(['id', 'id_2']).apply(lambda x: all(full24hour.loc[x.index]) and all7days.loc[x.index[0]])

    return df

dataset = pd.read_csv('/content/dataset-2.csv')
result = timestamp_check(dataset)
print(result)